{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","obj","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","canProcess","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAe0B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,EAflB,MAAMA,EAAQC,GACb,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KAEPF,EAASF,IAEVA,KASmB,QAAA,MAAA,EAJ1B,MAAMK,EAASC,GAAQC,QAAQC,sBAAsBF,OAErDP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ;;ACKjB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EApBA,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGZC,EAAkB,CAACC,EAAUC,IACjC,IAAId,QAAS,CAACC,EAASC,KAK5BD,EAJqBY,EAASE,IAAIC,GAChCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAUnE,QAAA,gBAAA,EAHA,MAAMZ,EAASa,GAAgBX,QAAQY,MAAMD,GAE7CL,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;AC6BnC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qBAAA,EAjDA,MAAMe,EAAM,GAGNC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGzCK,EAAmBC,IACxB7B,MAAAA,EAAQsB,EAA0B,IAAK,KAEtC,OAAA,IAAIpB,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACHyB,MAAAA,EAAaL,KAAKE,SAAW,GAEnCN,EAAIU,GAAKF,EAAYE,GACrBV,EAAId,KAAOP,EAEP8B,EACF3B,EAAQkB,GAERjB,EAAOyB,EAAYE,KAEpB/B,MA2BP,QAAA,gBAAA,EAtBA,MAAMgC,EAAa,EAAED,GAAAA,EAAIxB,KAAAA,MACvBC,QAAQC,mBAAmBsB,kBAAmBxB,SAG1C0B,EAAWF,IACfvB,QAAQ0B,qCAAqCH,+BAK/CH,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,KAC/BzB,KAAKsB,GACLI,MAAMH,GAETL,EAAgB,CAAEG,GAAI,GAAII,OAAQ,MAC/BzB,KAAKsB,GACLI,MAAMH;;AChDT,aAFA,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,cACA,EAAA,QAAA","file":"src.d9250604.js","sourceRoot":"../src","sourcesContent":[" export const delay = ms => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (true){\n        resolve (ms)\n      }\n    }, ms)\n  })\n};\n\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nexport const toggleUserState = (allUsers, userName) => {\n  return new Promise ((resolve, reject) => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    )\n\n    resolve(updatedUsers)\n  })\n}\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);","const obj = {}\n\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nexport const makeTransaction = (transaction) => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n  \n      obj.id = transaction.id\n      obj.time = delay\n\n      if (canProcess) {\n        resolve(obj);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  })\n\n};\n\nconst logSuccess = ({id, time}) => {\n  console.log(`Transaction ${id} processed in ${time} ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n\n\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);","\nimport { delay } from './js/task1'\nimport { toggleUserState } from './js/task2'\nimport { makeTransaction } from './js/task3'\n\n"]}